// <auto-generated />
using System;
using LoanManagement.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LoanManagement.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LoanManagement.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CustomerId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("LoanManagement.Models.Document", b =>
                {
                    b.Property<int>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentId"));

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DocumentId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("LoanManagement.Models.Installment", b =>
                {
                    b.Property<int>("InstallmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InstallmentId"));

                    b.Property<decimal>("AmountDue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AmountPaid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InstallmentNumber")
                        .HasColumnType("int");

                    b.Property<int>("LoanId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("InstallmentId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DueDate");

                    b.HasIndex("Status");

                    b.HasIndex("LoanId", "InstallmentNumber")
                        .IsUnique();

                    b.ToTable("Installments");
                });

            modelBuilder.Entity("LoanManagement.Models.Loan", b =>
                {
                    b.Property<int>("LoanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LoanId"));

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsNPA")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("LoanAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("LoanId");

                    b.HasIndex("ApplicationId")
                        .IsUnique();

                    b.HasIndex("CustomerId");

                    b.HasIndex("IsNPA");

                    b.ToTable("Loans");
                });

            modelBuilder.Entity("LoanManagement.Models.LoanAdmin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminId"));

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AdminId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("LoanAdmins");
                });

            modelBuilder.Entity("LoanManagement.Models.LoanApplication", b =>
                {
                    b.Property<int>("ApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplicationId"));

                    b.Property<DateTime>("ApplicationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("AssignedOfficerId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("DocumentUploaded")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("LoanAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RequestTenureInMonths")
                        .HasColumnType("int");

                    b.Property<int>("SchemeId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ApplicationId");

                    b.HasIndex("AssignedOfficerId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SchemeId");

                    b.HasIndex("Status");

                    b.ToTable("LoanApplications");
                });

            modelBuilder.Entity("LoanManagement.Models.LoanOfficer", b =>
                {
                    b.Property<int>("OfficerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OfficerId"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("OfficerId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("LoanOfficers");
                });

            modelBuilder.Entity("LoanManagement.Models.LoanScheme", b =>
                {
                    b.Property<int>("SchemeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SchemeId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("DurationsInMonths")
                        .HasColumnType("int");

                    b.Property<decimal>("InterestRate")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("MaxAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SchemeName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("SchemeId");

                    b.ToTable("LoanSchemes");

                    b.HasData(
                        new
                        {
                            SchemeId = 1,
                            Description = "Low interest rate home loan for residential properties",
                            DurationsInMonths = 240,
                            InterestRate = 8.5m,
                            MaxAmount = 5000000m,
                            SchemeName = "Home Loan"
                        },
                        new
                        {
                            SchemeId = 2,
                            Description = "Quick personal loan for immediate financial needs",
                            DurationsInMonths = 60,
                            InterestRate = 12.0m,
                            MaxAmount = 1000000m,
                            SchemeName = "Personal Loan"
                        },
                        new
                        {
                            SchemeId = 3,
                            Description = "Affordable car loan with competitive interest rates",
                            DurationsInMonths = 84,
                            InterestRate = 9.5m,
                            MaxAmount = 2000000m,
                            SchemeName = "Car Loan"
                        },
                        new
                        {
                            SchemeId = 4,
                            Description = "Education loan for higher studies with flexible repayment",
                            DurationsInMonths = 180,
                            InterestRate = 7.0m,
                            MaxAmount = 3000000m,
                            SchemeName = "Education Loan"
                        });
                });

            modelBuilder.Entity("LoanManagement.Models.Repayment", b =>
                {
                    b.Property<int>("RepaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RepaymentId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("InstallmentId")
                        .HasColumnType("int");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("RepaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("RepaymentId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("InstallmentId")
                        .IsUnique();

                    b.ToTable("Repayments");
                });

            modelBuilder.Entity("LoanManagement.Models.Report", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportId"));

                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("GeneratedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReportType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ReportId");

                    b.HasIndex("AdminId");

                    b.ToTable("Reports", t =>
                        {
                            t.HasCheckConstraint("CK_Report_DateRange", "EndDate >= StartDate");
                        });
                });

            modelBuilder.Entity("LoanManagement.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("LoanManagement.Models.Customer", b =>
                {
                    b.HasOne("LoanManagement.Models.User", "User")
                        .WithOne("Customer")
                        .HasForeignKey("LoanManagement.Models.Customer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LoanManagement.Models.Document", b =>
                {
                    b.HasOne("LoanManagement.Models.LoanApplication", "LoanApplication")
                        .WithMany("Documents")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LoanApplication");
                });

            modelBuilder.Entity("LoanManagement.Models.Installment", b =>
                {
                    b.HasOne("LoanManagement.Models.Customer", "Customer")
                        .WithMany("Installments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LoanManagement.Models.Loan", "Loan")
                        .WithMany("Installments")
                        .HasForeignKey("LoanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Loan");
                });

            modelBuilder.Entity("LoanManagement.Models.Loan", b =>
                {
                    b.HasOne("LoanManagement.Models.LoanApplication", "LoanApplication")
                        .WithOne("Loan")
                        .HasForeignKey("LoanManagement.Models.Loan", "ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LoanManagement.Models.Customer", "Customer")
                        .WithMany("Loans")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("LoanApplication");
                });

            modelBuilder.Entity("LoanManagement.Models.LoanAdmin", b =>
                {
                    b.HasOne("LoanManagement.Models.User", "User")
                        .WithOne("LoanAdmin")
                        .HasForeignKey("LoanManagement.Models.LoanAdmin", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LoanManagement.Models.LoanApplication", b =>
                {
                    b.HasOne("LoanManagement.Models.LoanOfficer", "LoanOfficer")
                        .WithMany("AssignedApplications")
                        .HasForeignKey("AssignedOfficerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LoanManagement.Models.Customer", "Customer")
                        .WithMany("LoanApplications")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LoanManagement.Models.LoanScheme", "LoanScheme")
                        .WithMany("LoanApplications")
                        .HasForeignKey("SchemeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("LoanOfficer");

                    b.Navigation("LoanScheme");
                });

            modelBuilder.Entity("LoanManagement.Models.LoanOfficer", b =>
                {
                    b.HasOne("LoanManagement.Models.User", "User")
                        .WithOne("LoanOfficer")
                        .HasForeignKey("LoanManagement.Models.LoanOfficer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LoanManagement.Models.Repayment", b =>
                {
                    b.HasOne("LoanManagement.Models.Customer", "Customer")
                        .WithMany("Repayments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LoanManagement.Models.Installment", "Installment")
                        .WithOne("Repayment")
                        .HasForeignKey("LoanManagement.Models.Repayment", "InstallmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Installment");
                });

            modelBuilder.Entity("LoanManagement.Models.Report", b =>
                {
                    b.HasOne("LoanManagement.Models.LoanAdmin", "LoanAdmin")
                        .WithMany("Reports")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LoanAdmin");
                });

            modelBuilder.Entity("LoanManagement.Models.Customer", b =>
                {
                    b.Navigation("Installments");

                    b.Navigation("LoanApplications");

                    b.Navigation("Loans");

                    b.Navigation("Repayments");
                });

            modelBuilder.Entity("LoanManagement.Models.Installment", b =>
                {
                    b.Navigation("Repayment");
                });

            modelBuilder.Entity("LoanManagement.Models.Loan", b =>
                {
                    b.Navigation("Installments");
                });

            modelBuilder.Entity("LoanManagement.Models.LoanAdmin", b =>
                {
                    b.Navigation("Reports");
                });

            modelBuilder.Entity("LoanManagement.Models.LoanApplication", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("Loan");
                });

            modelBuilder.Entity("LoanManagement.Models.LoanOfficer", b =>
                {
                    b.Navigation("AssignedApplications");
                });

            modelBuilder.Entity("LoanManagement.Models.LoanScheme", b =>
                {
                    b.Navigation("LoanApplications");
                });

            modelBuilder.Entity("LoanManagement.Models.User", b =>
                {
                    b.Navigation("Customer");

                    b.Navigation("LoanAdmin");

                    b.Navigation("LoanOfficer");
                });
#pragma warning restore 612, 618
        }
    }
}
